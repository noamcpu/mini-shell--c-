#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<string.h>
#include<fcntl.h>

        int main(int argc, char *argv[])
    {
        printf("INFO: Father started PID[810]\n", getpid());
        printf("Welcome to my extended mini shell. Type \"exit\" to terminate.\n");// enter to minishell
        char command[100];
        char  *token[20];
          char  *args[20];
        int ch1,ch2;
        int  fd[2],j, pipeT,st;
        while(1)
        {
            pipeT = 0;
            printf("minishell>\n");
            gets(command);
            token[0] = strtok(command, " ");
            for (j=1; token[j] = strtok(NULL, " "); j++)// left size of pipe
            {
                if (!strcmp(token[j], "|"))
                {
                    pipeT = 1;
                    break;
                }
            }
            if (!strcmp(token[0], "exit"))// cheak if command exit
            {
                printf("INFO: Father will terminate\n");
                exit(0);
            }
 if (!pipeT)// if there is no pipe , we do child process
            {
                printf("INFO: No pipe detected, creating child for command \"pwd\"\n", command);
                switch(ch1 = fork()) {
                {
                   case -1:
                        perror(" fork failed\n");
                        exit(1);
                   case 0 :
                        printf("INFO: Father started PID[810]\n", getpid(),command);
                        execvp(token[0],token );
                    printf("command not found\n");
                    exit(4);
                    default:
                        wait(&st);
                    printf("INFO: Child with PID[811]terminated, continue waiting commands\n" , ch1);
                    break;
                }
           }
      }
 else// there is pipe
            {
                token[j] = NULL;
                for (j = 1; args[j] = strtok(NULL, " "); j++) ;
                printf("INFO: Pipe detected. Command 1: \"cat *.c\" and Command 2: \"grep include\"\n", token[0], args[0]);
                printf("INFO: Making pipe\n");
                if (pipe(fd)< 0)
                {
                    perror(" fork failed\n");
                    exit(2);
                }
                switch (ch1 = fork())
                {

                   case -1:
                        perror(" fork failed\n");
                    exit(1);
                   case 0 :
                        printf("INFO: Father started PID[810]\n", getpid(),token[0]);
                    dup2(fd[1], 1);
                    printf("command not found\n");
                    exit(4);
                    default:
wait(&st);
                    switch (ch2 = fork())
                    {

                   case -1:
                        perror(" fork failed\n");
                        exit(1);
                   case 0 :
                        printf("INFO: Father started PID[810]\n", getpid(), args[0]);
                        dup2(fd[0], 0);
                        close(fd[1]);
                        execvp(args[0], args);
                        printf("command not found\n");
                        exit(4);
                        default:
                            close(fd[0]);
                        close(fd[1]);
                        wait(&st);
                        break;
                    }
 printf("INFO: Child with PID[812] terminated\n", ch1);
                        printf("INFO: Child with PID[812] terminated\n", ch2);
                }

        }
    }
}

